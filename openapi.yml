openapi: 3.0.1
info:
  title: Account service
  description: 'This is a sample server Petstore server.  You can find out more about     Swagger
    at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For
    this sample, you can use the api key `special-key` to test the authorization     filters.'
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0

externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
  
servers:
  - description: "Localhost server"
    url: http://localhost:3000

paths:
  /accounts:
    get:
      summary: Return a list of accounts
      operationId: listAccounts
      parameters:
        - name: login
          description: "Login of all accounts to retrieve"
          in: query
          schema:
            type: array
            items:
              type: string
              description: "Login base64-url encoded"
              format: base64-url
              
        - name: id
          description: "ID of all accounts to retrieve"
          in: query
          schema:
            type: array
            items:
              type: string
              format: base64-url

        - name:  creation-date.max
          in: query
          schema:
            type: string
            format: "ISO 8601 Extended Format"

        - name: creation-date.min
          in: query
          schema:
            type: string
            format: "ISO 8601 Extended Format"
          
        - name: deletion-date.min
          in: query
          schema:
            type: string
            format: "ISO 8601 Extended Format"
          
        - name: deletion-date.max
          in: query
          schema:
            type: string
            format: "ISO 8601 Extended Format"
          
      responses:
        200:
          description: List of all accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Account"
    
  /account:
    put:
      summary: "Create a new account"
      operationId: createAccount
      requestBody:
        description: "Information of the account to create"
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  example: "anyKindOfLogin"
                  pattern: ^[a-zA-Z0-9@+.-_]+$

                password:
                  type: string
                  example: "Som3RandomPa55word*"
                  
      responses:
        200:
          description: Account created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"

        400:
          description: Invalid data provided
          content:
            application/json:
              schema:
                type: array
                example:
                  - code: PASSWORD_TOO_SHORT
                    detail: "Password too short (min: 6)"
                  - code: NO_LOGIN_PROVIDED
                    detail: "No login provided"
                items:
                  type: object
                  properties:
                    code:
                      type: string
                      description: "Code of the error"
                      enum: 
                        - LOGIN_TOO_LONG
                        - LOGIN_TOO_SHORT
                        - NO_LOGIN_PROVIDED
                        - NO_PASSWORD_PROVIDED
                        - PASSWORD_TOO_LONG
                        - PASSWORD_TOO_SHORT
                        
                    detail:
                      type: string
                      description: "Label of the error"
    
  /account/{id}:
    get:
      summary: "Return information about an account"
      operationId: getAccount
      parameters:
        - name: id
          in: path
          description: "ID of account to return"
          required: true
          schema:
            type: string
            format: base64-url
      responses:
        200:
          description: "Account information"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
                
        404:
          description: "Account not found"
          
    post:
      summary: "Update an account"
      operationId: updateAccount
      parameters:
        - name: id
          in: path
          description: "ID of account to return"
          required: true
          schema:
            type: string
            format: base64-url
      requestBody:
        description: "Information to update. Set a field to null to empty a field."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Account"
              
      responses:
        200:
          description: "Update successful"
          
        404:
          description: "Account not found"
          
    delete:
      summary: "Delete an account"
      operationId: deleteAccount
      parameters:
        - name: id
          in: path
          description: "ID of account to return"
          required: true
          schema:
            type: string
            format: base64-url
      responses:
        200:
          description: "Delete successful"
          
        404:
          description: "Account not found"

  /account/{id}/password:
    put:
      summary: "Update a password"
      operationId: updateAccountPassword
      parameters:
        - name: id
          in: path
          description: "ID of account"
          required: true
          schema:
            type: string
            format: base64-url
      requestBody:
        description: "Information to update. Set a field to null to empty a field."
        content:
          application/json:
            schema:
              type: object
              properties:
                hash:
                  type: string
                  description: "Hash of the new password"
                  format: base64-url
      responses:
        200:
          description: "Account information"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
                
        404:
          description: "Account not found"
          
  /account/{id}/password/check:
    post:
      summary: "Check a password. In case of too many password check fail, the account will be lock. Use the /account/{id}/unlock route to unlock it."
      operationId: checkAccountPassword
      parameters:
        - name: id
          in: path
          description: "ID of account"
          required: true
          schema:
            type: string
            format: base64-url
      requestBody:
        description: "Information to update. Set a field to null to empty a field."
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: "Password to check. The password has been "
                  format: base64-url

      responses:
        200:
          description: "Password check successful"

        401:
          description: "Invalid password"

        403:
          description: "Account locked"

        404:
          description: "Account not found"

  /account/{id}/unlock:
    post:
      summary: "Unlock an account"
      operationId: unlockAccount
      parameters:
        - name: id
          in: path
          description: "ID of account"
          required: true
          schema:
            type: string
            format: base64-url
      responses:
        200:
          description: "Account unlocked"

        404:
          description: "Account not found"

components:
  schemas:
    Account:
      type: object
      properties:
        id:
          type: string
          description: ID of the account
          
        login:
          type: string
          description: Login of the account
          
        creationDate:
          type: string
          
        deletionDate:
          type: string
